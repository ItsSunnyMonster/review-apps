name: 'Deploy review apps to gh-pages'
description: |
  Automatically deploy static apps to gh-pages, so you're able to easily QA it
inputs:
  gh-pages-source-branch:  # id of input
    description: 'The branch you configured in github to be the source for gh-pages. defaults to "gh-pages run"'
    default: 'gh-pages'
  public-assets-dir:  # id of input
    description: 'The directory where you build artifacts will live'
    default: 'dist'
  output-dir:
    description: |
      'Dir is related to URL path in github pages.
      If you want something like: https://githubname.github.io/repo/storybooks/branch-name, pass string "storybook"'
    default: 'review-apps'
runs:
  using: "composite"
  steps:
    - name: 'Configure git author'
      run: |
        NAME=${{github.event.pusher.name}}
        EMAIL=${{github.event.pusher.email}}
        echo "Configuring git config name: $NAME, email: $EMAIL"
        git config --global user.name $NAME
        git config --global user.email $EMAIL
        git config pull.rebase true
      shell: bash
    - name: 'Commit udpated review app'
      run: |
        BRANCH_NAME=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        DIST_DIR=${{inputs.public-assets-dir}}
        OUTPUT_ROOT_DIR=${{inputs.output-dir}}
        FULL_PATH_DIR="$OUTPUT_ROOT_DIR/$BRANCH_NAME"
        STATIC_APP_BRANCH=${{inputs.gh-pages-source-branch}}
        HEAD_COMMIT_ID=${{github.event.head_commit.id}}
        COMMIT_MESSAGE="[skip ci]  ref to $HEAD_COMMIT_ID"

        echo " -> Current working branch: $BRANCH_NAME"
        echo " -> Will move (and override) the build result on '$DIST_DIR' to '$FULL_PATH_DIR' in $STATIC_APP_BRANCH"
        echo " -> Finally, will commit and push with the following message:"
        echo " -> $COMMIT_MESSAGE"

        mv $DIST_DIR .tmp
        git fetch
        git checkout $STATIC_APP_BRANCH
        mkdir $OUTPUT_ROOT_DIR || \
          echo " -> Creating dir '$OUTPUT_ROOT_DIR' can fail safely"
        rm -r $FULL_PATH_DIR
        mv .tmp $FULL_PATH_DIR
        git status | grep "$FULL_PATH_DIR" && \
          echo " -> Changes detected in new build" && \
          git add $FULL_PATH_DIR && \
          git commit -m $COMMIT_MESSAGE || \
          echo "No changes on $FULL_PATH_DIR to commit! Moving on"
      shell: bash
    - name: 'Try to push with updated review app'
      run: |
        echo "Trying to push new changes to $STATIC_APP_BRANCH"
        COUNTER=0
        function retry() {
          echo "Retrying... count: $COUNTER"
          git pull origin $STATIC_APP_BRANCH
          git push origin $STATIC_APP_BRANCH
          if [ $? -eq 0 ]; then
            if [ $COUNTER -lt 5 ]; then
              ((COUNTER=COUNTER+1))
              retry
            fi
          fi
        }
        retry
      shell: bash
